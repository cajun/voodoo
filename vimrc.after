set nocompatible    " yeah this is VIM not VI
set shell=/bin/bash " Using zsh or fish keep vim the same
syntax on           " syntax highlighting

" Extras ************************************************************************
set wildmenu                      " This allows a small menu to appear at the bottom and not a new buffer
set wildmode=list:longest,full    " Sets the type of menu to appear
set wildignore +=vendor/**,tmp/** " What not to include in the menus
set hidden                        " Allow you to handle buffers better
runtime macros/matchit.vim        " Mo power for matching with %

" Indenting *******************************************************************
set autoindent  " Automatically set the indent of a new line (local to buffer)
set smartindent " smartindent	(local to buffer)

" Searching *******************************************************************
set hlsearch   " highlight search
set incsearch  " incremental search, search as you type
set ignorecase " Ignore case when searching
set smartcase  " Ignore case when searching lowercase

" Colors **********************************************************************
set t_Co=256                   " 256 colors working with OSX Terminal
let g:solarized_termcolors=256 " Use as many as we can
let g:solarized_termtrans=1    " Transparency when we can
set background=dark            " Use Dark instead of Light version
colorscheme solarized          " Solarized is NICE

" Status Line *****************************************************************
set showcmd     " we like it
set ruler       " Show ruler
set cmdheight=1 " Make command line one lines high

" File Issues ***********************************************************************
highlight ExtraWhitespace ctermbg=red guibg=red
highlight LongLine ctermbg=yellow guibg=red

autocmd BufWinEnter * let w:m2=matchadd('LongLine', '\%>120v.\+', -1)
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Formatter
set formatprg=par\ -w50

" Mappings ********************************************************************
com! W :w

command! -nargs=1 Silent
      \ | execute ':silent !'. <q-args>
      \ | execute ':redraw!'


map <leader>f :CtrlP<cr>
map <leader>b :CtrlPBuffer<cr>
map <leader>B :BuffergatorToggle<cr>

" Helpful copy lines of last search to new window
nmap <F3> :redir @a<CR>:g//<CR>:redir END<CR>:new<CR>:put! a<CR><CR>

" Copy and Paste to clipborad
vmap <C-c> :<Esc>`>a<CR><Esc>mx`<i<CR><Esc>my'xk$v'y!xclip -selection c<CR>u
map <Insert> :set paste<CR>i<CR><CR><Esc>k:.!xclip -o<CR>JxkJx:set nopaste<CR>


autocmd BufReadPre *.pdf set ro nowrap
autocmd BufReadPost *.pdf silent %!pdftotext "%" -nopgbrk -layout -q -eol unix -
autocmd BufWritePost *.pdf silent !rm -rf ~/PDF/%
autocmd BufWritePost *.pdf silent !lp -s -d pdffg "%"
autocmd BufWritePost *.pdf silent !until [ -e ~/PDF/% ]; do sleep 1; done
autocmd BufWritePost *.pdf silent !mv ~/PDF/% %:p:h

" File Stuff ******************************************************************
" To show current filetype use: set filetype
filetype plugin indent on

set autoread " Auto read when a file is changed from the outside

au! BufRead,BufNewFile *.json set filetype=json foldmethod=syntax
au BufRead,BufNewFile *.hamlc set filetype=haml

" Android Development
au BufReadPost,BufNew *.java exe ":compiler ant"
au BufReadPost,BufNew *.xml exe ":compiler ant"

" Super undo powers
set undodir=~/.undo
set undofile
set undolevels=1000
set undoreload=10000

" Sessions ********************************************************************
" Sets what is saved when you save a session
set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize


" Misc ************************************************************************
set backspace=indent,eol,start
set relativenumber " Show line numbers
set vb t_vb=       " Turn off bell, this could be more annoying, but I'm not sure how
set cursorline     " Love this feature  Hightlight current line

" Invisible characters *********************************************************
set listchars=trail:.,tab:>-,eol:$
set nolist
:noremap ,i :set list!<CR> " Toggle invisible chars


" Mouse ***********************************************************************
set mouse=a " Enable the mouse
"set selectmode=mouse
set ttymouse=xterm


" Omni Completion *************************************************************
set ofu=syntaxcomplete#Complete

autocmd FileType html set omnifunc=html5complete#CompleteTags
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete

" Where to look for tags
set tags =./tags,./TAGS,tags,TAGS,./tmp/tags,./tmp/TAGS

" autocomplpop ***************************************************************
" complete option
set complete=.,w,b,u,i,t,k
let g:AutoComplPop_CompleteOption = '.,w,b,u,i,t,k'
let g:AutoComplPop_IgnoreCaseOption = 0
let g:AutoComplPop_BehaviorKeywordLength = 2


nnoremap <F5> :GundoToggle<CR>
" Tabular
if exists(":Tabularize")
  nmap <Leader>x= :Tabularize /=<CR>
  vmap <Leader>x= :Tabularize /=<CR>
  nmap <Leader>x: :Tabularize /:\zs<CR>
  vmap <Leader>x: :Tabularize /:\zs<CR>
endif

" Format the statusline
let &statusline='%{fugitive#statusline()} %<%f%{&mod?"[+]":""}%r%{&fenc !~ "^$\\|utf-8" || &bomb ? "[".&fenc.(&bomb?"-bom":"")."]" : ""}%=%10.(Line: %l/%L Col: %c%V %P%)%#warningmsg#%{SyntasticStatuslineFlag()}'
